/* tslint:disable */
/* eslint-disable */
/**
 * Jomon API
 * JomonのAPIです。
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'user'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'comment'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'budget'?: number;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    'comment'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {StatusEnum}
     * @memberof InlineObject2
     */
    'status'?: StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineObject2
     */
    'reason'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject3
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject4
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject5
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject7
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'code_challenge'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'code_challenge_method'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'client_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'response_type'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<Tag>}
     * @memberof InlineResponse2001
     */
    'tags'?: Array<Tag>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Group>}
     * @memberof InlineResponse2002
     */
    'groups'?: Array<Group>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2003
     */
    'members'?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2004
     */
    'owners'?: Array<string>;
}
/**
 * 
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2005
     */
    'file_id'?: string;
}
/**
 * 
 * @export
 * @interface PostGroup
 */
export interface PostGroup {
    /**
     * 
     * @type {string}
     * @memberof PostGroup
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostGroup
     */
    'description'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostGroup
     */
    'budget'?: number;
}
/**
 * 
 * @export
 * @interface PostRequest
 */
export interface PostRequest {
    /**
     * 
     * @type {string}
     * @memberof PostRequest
     */
    'created_by'?: string;
    /**
     * 
     * @type {number}
     * @memberof PostRequest
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostRequest
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostRequest
     */
    'content'?: string;
    /**
     * 
     * @type {Array<PostTag>}
     * @memberof PostRequest
     */
    'tags'?: Array<PostTag>;
    /**
     * 
     * @type {PostGroup}
     * @memberof PostRequest
     */
    'group'?: PostGroup;
}
/**
 * 
 * @export
 * @interface PostTag
 */
export interface PostTag {
    /**
     * 
     * @type {string}
     * @memberof PostTag
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostTag
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface PostTransaction
 */
export interface PostTransaction {
    /**
     * 
     * @type {number}
     * @memberof PostTransaction
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof PostTransaction
     */
    'target'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostTransaction
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PostTransaction
     */
    'group'?: string;
}
/**
 * 
 * @export
 * @interface PostUser
 */
export interface PostUser {
    /**
     * 
     * @type {string}
     * @memberof PostUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PostUser
     */
    'display_name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PostUser
     */
    'admin'?: boolean;
}
/**
 * 
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'status'?: RequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'created_by'?: string;
    /**
     * 
     * @type {number}
     * @memberof Request
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'content'?: string;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Request
     */
    'tags'?: Array<Tag>;
    /**
     * 
     * @type {Group}
     * @memberof Request
     */
    'group'?: Group;
}

export const RequestStatusEnum = {
    Submitted: 'submitted',
    FixRequired: 'fix_required',
    Accepted: 'accepted',
    Completed: 'completed',
    Rejected: 'rejected'
} as const;

export type RequestStatusEnum = typeof RequestStatusEnum[keyof typeof RequestStatusEnum];

/**
 * 
 * @export
 * @interface RequestDetail
 */
export interface RequestDetail {
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof RequestDetail
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'content'?: string;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof RequestDetail
     */
    'comments'?: Array<Comment>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestDetail
     */
    'files'?: Array<string>;
    /**
     * 
     * @type {Array<Status>}
     * @memberof RequestDetail
     */
    'statuses'?: Array<Status>;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof RequestDetail
     */
    'tags'?: Array<Tag>;
    /**
     * 
     * @type {Group}
     * @memberof RequestDetail
     */
    'group'?: Group;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'created_by'?: string;
    /**
     * 
     * @type {StatusEnum}
     * @memberof Status
     */
    'status'?: StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'reason'?: string;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'created_at'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StatusEnum = {
    Submitted: 'submitted',
    FixRequired: 'fix_required',
    Accepted: 'accepted',
    Completed: 'completed',
    Rejected: 'rejected'
} as const;

export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'id'?: string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'target'?: string;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Transaction
     */
    'tags'?: Array<Tag>;
    /**
     * 
     * @type {Group}
     * @memberof Transaction
     */
    'group'?: Group;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'display_name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'admin'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deleted_at'?: string;
}

/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * adminユーザーの一覧を返す。管理者権限が必要。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * adminユーザーを追加する。管理者権限が必要。
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminsPost: async (inlineObject3: InlineObject3, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inlineObject3' is not null or undefined
            assertParamExists('adminsPost', 'inlineObject3', inlineObject3)
            const localVarPath = `/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject3, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * adminユーザーを削除する。管理者権限が必要。
         * @param {string} userID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminsUserIDDelete: async (userID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userID' is not null or undefined
            assertParamExists('adminsUserIDDelete', 'userID', userID)
            const localVarPath = `/admins/{userID}`
                .replace(`{${"userID"}}`, encodeURIComponent(String(userID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminsApiAxiosParamCreator(configuration)
    return {
        /**
         * adminユーザーの一覧を返す。管理者権限が必要。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * adminユーザーを追加する。管理者権限が必要。
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminsPost(inlineObject3: InlineObject3, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineObject3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminsPost(inlineObject3, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * adminユーザーを削除する。管理者権限が必要。
         * @param {string} userID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminsUserIDDelete(userID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineObject3>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminsUserIDDelete(userID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminsApiFp(configuration)
    return {
        /**
         * adminユーザーの一覧を返す。管理者権限が必要。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminsGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.adminsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * adminユーザーを追加する。管理者権限が必要。
         * @param {InlineObject3} inlineObject3 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminsPost(inlineObject3: InlineObject3, options?: any): AxiosPromise<InlineObject3> {
            return localVarFp.adminsPost(inlineObject3, options).then((request) => request(axios, basePath));
        },
        /**
         * adminユーザーを削除する。管理者権限が必要。
         * @param {string} userID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminsUserIDDelete(userID: string, options?: any): AxiosPromise<InlineObject3> {
            return localVarFp.adminsUserIDDelete(userID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI {
    /**
     * adminユーザーの一覧を返す。管理者権限が必要。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminsGet(options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).adminsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adminユーザーを追加する。管理者権限が必要。
     * @param {InlineObject3} inlineObject3 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminsPost(inlineObject3: InlineObject3, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).adminsPost(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adminユーザーを削除する。管理者権限が必要。
     * @param {string} userID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminsUserIDDelete(userID: string, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).adminsUserIDDelete(userID, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * PKCEを取得する｡
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGenpkceGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/genpkce`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * PKCEを取得する｡
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authGenpkceGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authGenpkceGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * PKCEを取得する｡
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authGenpkceGet(options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.authGenpkceGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * PKCEを取得する｡
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGenpkceGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGenpkceGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDDelete: async (fileID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileID' is not null or undefined
            assertParamExists('filesFileIDDelete', 'fileID', fileID)
            const localVarPath = `/files/{fileID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたファイルを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDGet: async (fileID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileID' is not null or undefined
            assertParamExists('filesFileIDGet', 'fileID', fileID)
            const localVarPath = `/files/{fileID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ファイルをアップロードする。
         * @param {any} [file] 
         * @param {string} [name] 
         * @param {string} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost: async (file?: any, name?: string, requestId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (requestId !== undefined) { 
                localVarFormParams.append('request_id', requestId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesFileIDDelete(fileID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesFileIDDelete(fileID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定されたファイルを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesFileIDGet(fileID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesFileIDGet(fileID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ファイルをアップロードする。
         * @param {any} [file] 
         * @param {string} [name] 
         * @param {string} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesPost(file?: any, name?: string, requestId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesPost(file, name, requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDDelete(fileID: string, options?: any): AxiosPromise<void> {
            return localVarFp.filesFileIDDelete(fileID, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたファイルを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesFileIDGet(fileID: string, options?: any): AxiosPromise<any> {
            return localVarFp.filesFileIDGet(fileID, options).then((request) => request(axios, basePath));
        },
        /**
         * ファイルをアップロードする。
         * @param {any} [file] 
         * @param {string} [name] 
         * @param {string} [requestId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesPost(file?: any, name?: string, requestId?: string, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.filesPost(file, name, requestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
     * @param {string} fileID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileIDDelete(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileIDDelete(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたファイルを返す
     * @param {string} fileID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileIDGet(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileIDGet(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ファイルをアップロードする。
     * @param {any} [file] 
     * @param {string} [name] 
     * @param {string} [requestId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesPost(file?: any, name?: string, requestId?: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesPost(file, name, requestId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * グループの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループを削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDDelete: async (groupID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('groupsGroupIDDelete', 'groupID', groupID)
            const localVarPath = `/groups/{groupID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersDelete: async (groupID: string, inlineObject5: InlineObject5, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('groupsGroupIDMembersDelete', 'groupID', groupID)
            // verify required parameter 'inlineObject5' is not null or undefined
            assertParamExists('groupsGroupIDMembersDelete', 'inlineObject5', inlineObject5)
            const localVarPath = `/groups/{groupID}/members`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject5, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したグループに所属しているユーザーを返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersGet: async (groupID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('groupsGroupIDMembersGet', 'groupID', groupID)
            const localVarPath = `/groups/{groupID}/members`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersPost: async (groupID: string, inlineObject4: InlineObject4, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('groupsGroupIDMembersPost', 'groupID', groupID)
            // verify required parameter 'inlineObject4' is not null or undefined
            assertParamExists('groupsGroupIDMembersPost', 'inlineObject4', inlineObject4)
            const localVarPath = `/groups/{groupID}/members`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject4, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループオーナーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject7} inlineObject7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDOwnersDelete: async (groupID: string, inlineObject7: InlineObject7, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('groupsGroupIDOwnersDelete', 'groupID', groupID)
            // verify required parameter 'inlineObject7' is not null or undefined
            assertParamExists('groupsGroupIDOwnersDelete', 'inlineObject7', inlineObject7)
            const localVarPath = `/groups/{groupID}/owners`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject7, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したグループに所属しているグループオーナーを返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDOwnersGet: async (groupID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('groupsGroupIDOwnersGet', 'groupID', groupID)
            const localVarPath = `/groups/{groupID}/owners`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDOwnersPost: async (groupID: string, inlineObject6: InlineObject6, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('groupsGroupIDOwnersPost', 'groupID', groupID)
            // verify required parameter 'inlineObject6' is not null or undefined
            assertParamExists('groupsGroupIDOwnersPost', 'inlineObject6', inlineObject6)
            const localVarPath = `/groups/{groupID}/owners`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject6, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDPut: async (groupID: string, postGroup: PostGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('groupsGroupIDPut', 'groupID', groupID)
            // verify required parameter 'postGroup' is not null or undefined
            assertParamExists('groupsGroupIDPut', 'postGroup', postGroup)
            const localVarPath = `/groups/{groupID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループを追加する。管理者権限が必要。
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost: async (postGroup: PostGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postGroup' is not null or undefined
            assertParamExists('groupsPost', 'postGroup', postGroup)
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * グループの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループを削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupIDDelete(groupID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupIDDelete(groupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupIDMembersDelete(groupID: string, inlineObject5: InlineObject5, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupIDMembersDelete(groupID, inlineObject5, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定したグループに所属しているユーザーを返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupIDMembersGet(groupID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupIDMembersGet(groupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupIDMembersPost(groupID: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineObject4>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupIDMembersPost(groupID, inlineObject4, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループオーナーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject7} inlineObject7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupIDOwnersDelete(groupID: string, inlineObject7: InlineObject7, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupIDOwnersDelete(groupID, inlineObject7, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定したグループに所属しているグループオーナーを返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupIDOwnersGet(groupID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupIDOwnersGet(groupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupIDOwnersPost(groupID: string, inlineObject6: InlineObject6, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineObject6>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupIDOwnersPost(groupID, inlineObject6, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsGroupIDPut(groupID: string, postGroup: PostGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsGroupIDPut(groupID, postGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループを追加する。管理者権限が必要。
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupsPost(postGroup: PostGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupsPost(postGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * グループの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGet(options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.groupsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * グループを削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDDelete(groupID: string, options?: any): AxiosPromise<void> {
            return localVarFp.groupsGroupIDDelete(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject5} inlineObject5 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersDelete(groupID: string, inlineObject5: InlineObject5, options?: any): AxiosPromise<void> {
            return localVarFp.groupsGroupIDMembersDelete(groupID, inlineObject5, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したグループに所属しているユーザーを返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersGet(groupID: string, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.groupsGroupIDMembersGet(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject4} inlineObject4 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDMembersPost(groupID: string, inlineObject4: InlineObject4, options?: any): AxiosPromise<InlineObject4> {
            return localVarFp.groupsGroupIDMembersPost(groupID, inlineObject4, options).then((request) => request(axios, basePath));
        },
        /**
         * グループオーナーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject7} inlineObject7 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDOwnersDelete(groupID: string, inlineObject7: InlineObject7, options?: any): AxiosPromise<void> {
            return localVarFp.groupsGroupIDOwnersDelete(groupID, inlineObject7, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したグループに所属しているグループオーナーを返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDOwnersGet(groupID: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.groupsGroupIDOwnersGet(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {InlineObject6} inlineObject6 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDOwnersPost(groupID: string, inlineObject6: InlineObject6, options?: any): AxiosPromise<InlineObject6> {
            return localVarFp.groupsGroupIDOwnersPost(groupID, inlineObject6, options).then((request) => request(axios, basePath));
        },
        /**
         * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsGroupIDPut(groupID: string, postGroup: PostGroup, options?: any): AxiosPromise<Group> {
            return localVarFp.groupsGroupIDPut(groupID, postGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * グループを追加する。管理者権限が必要。
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupsPost(postGroup: PostGroup, options?: any): AxiosPromise<Group> {
            return localVarFp.groupsPost(postGroup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * グループの一覧を返す。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGet(options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループを削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDDelete(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDDelete(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {InlineObject5} inlineObject5 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDMembersDelete(groupID: string, inlineObject5: InlineObject5, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDMembersDelete(groupID, inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したグループに所属しているユーザーを返す。
     * @param {string} groupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDMembersGet(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDMembersGet(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {InlineObject4} inlineObject4 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDMembersPost(groupID: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDMembersPost(groupID, inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループオーナーをグループから削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {InlineObject7} inlineObject7 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDOwnersDelete(groupID: string, inlineObject7: InlineObject7, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDOwnersDelete(groupID, inlineObject7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したグループに所属しているグループオーナーを返す。
     * @param {string} groupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDOwnersGet(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDOwnersGet(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {InlineObject6} inlineObject6 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDOwnersPost(groupID: string, inlineObject6: InlineObject6, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDOwnersPost(groupID, inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {PostGroup} postGroup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDPut(groupID: string, postGroup: PostGroup, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDPut(groupID, postGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループを追加する。管理者権限が必要。
     * @param {PostGroup} postGroup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsPost(postGroup: PostGroup, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsPost(postGroup, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequestsApi - axios parameter creator
 * @export
 */
export const RequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 依頼一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {number} [year] 何年度の依頼か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsGet: async (sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString().substr(0,10) :
                    since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = (until as any instanceof Date) ?
                    (until as any).toISOString().substr(0,10) :
                    until;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 依頼を新規作成する。
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsPost: async (postRequest: PostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRequest' is not null or undefined
            assertParamExists('requestsPost', 'postRequest', postRequest)
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したコメントを削除する。
         * @param {string} requestID 
         * @param {number} commentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDCommentsCommentIDDelete: async (requestID: string, commentID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('requestsRequestIDCommentsCommentIDDelete', 'requestID', requestID)
            // verify required parameter 'commentID' is not null or undefined
            assertParamExists('requestsRequestIDCommentsCommentIDDelete', 'commentID', commentID)
            const localVarPath = `/requests/{requestID}/comments/{commentID}`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)))
                .replace(`{${"commentID"}}`, encodeURIComponent(String(commentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * コメントを変更する。
         * @param {string} requestID 
         * @param {number} commentID 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDCommentsCommentIDPut: async (requestID: string, commentID: number, inlineObject1: InlineObject1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('requestsRequestIDCommentsCommentIDPut', 'requestID', requestID)
            // verify required parameter 'commentID' is not null or undefined
            assertParamExists('requestsRequestIDCommentsCommentIDPut', 'commentID', commentID)
            // verify required parameter 'inlineObject1' is not null or undefined
            assertParamExists('requestsRequestIDCommentsCommentIDPut', 'inlineObject1', inlineObject1)
            const localVarPath = `/requests/{requestID}/comments/{commentID}`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)))
                .replace(`{${"commentID"}}`, encodeURIComponent(String(commentID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した依頼にコメントを新規作成する。
         * @param {string} requestID 
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDCommentsPost: async (requestID: string, inlineObject: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('requestsRequestIDCommentsPost', 'requestID', requestID)
            // verify required parameter 'inlineObject' is not null or undefined
            assertParamExists('requestsRequestIDCommentsPost', 'inlineObject', inlineObject)
            const localVarPath = `/requests/{requestID}/comments`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した依頼の詳細を取得する。
         * @param {string} requestID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDGet: async (requestID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('requestsRequestIDGet', 'requestID', requestID)
            const localVarPath = `/requests/{requestID}`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した依頼を修正する。作成者権限が必要。
         * @param {string} requestID 
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDPut: async (requestID: string, postRequest: PostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('requestsRequestIDPut', 'requestID', requestID)
            // verify required parameter 'postRequest' is not null or undefined
            assertParamExists('requestsRequestIDPut', 'postRequest', postRequest)
            const localVarPath = `/requests/{requestID}`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。reasonは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
         * @param {string} requestID 
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDStatusPut: async (requestID: string, inlineObject2: InlineObject2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('requestsRequestIDStatusPut', 'requestID', requestID)
            // verify required parameter 'inlineObject2' is not null or undefined
            assertParamExists('requestsRequestIDStatusPut', 'inlineObject2', inlineObject2)
            const localVarPath = `/requests/{requestID}/status`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestsApi - functional programming interface
 * @export
 */
export const RequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * 依頼一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {number} [year] 何年度の依頼か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsGet(sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Request>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsGet(sort, target, year, since, until, tag, group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 依頼を新規作成する。
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsPost(postRequest: PostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsPost(postRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定したコメントを削除する。
         * @param {string} requestID 
         * @param {number} commentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsRequestIDCommentsCommentIDDelete(requestID: string, commentID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsRequestIDCommentsCommentIDDelete(requestID, commentID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * コメントを変更する。
         * @param {string} requestID 
         * @param {number} commentID 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsRequestIDCommentsCommentIDPut(requestID: string, commentID: number, inlineObject1: InlineObject1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsRequestIDCommentsCommentIDPut(requestID, commentID, inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した依頼にコメントを新規作成する。
         * @param {string} requestID 
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsRequestIDCommentsPost(requestID: string, inlineObject: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsRequestIDCommentsPost(requestID, inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した依頼の詳細を取得する。
         * @param {string} requestID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsRequestIDGet(requestID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsRequestIDGet(requestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した依頼を修正する。作成者権限が必要。
         * @param {string} requestID 
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsRequestIDPut(requestID: string, postRequest: PostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsRequestIDPut(requestID, postRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。reasonは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
         * @param {string} requestID 
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async requestsRequestIDStatusPut(requestID: string, inlineObject2: InlineObject2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.requestsRequestIDStatusPut(requestID, inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequestsApi - factory interface
 * @export
 */
export const RequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestsApiFp(configuration)
    return {
        /**
         * 依頼一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {number} [year] 何年度の依頼か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsGet(sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options?: any): AxiosPromise<Array<Request>> {
            return localVarFp.requestsGet(sort, target, year, since, until, tag, group, options).then((request) => request(axios, basePath));
        },
        /**
         * 依頼を新規作成する。
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsPost(postRequest: PostRequest, options?: any): AxiosPromise<RequestDetail> {
            return localVarFp.requestsPost(postRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したコメントを削除する。
         * @param {string} requestID 
         * @param {number} commentID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDCommentsCommentIDDelete(requestID: string, commentID: number, options?: any): AxiosPromise<void> {
            return localVarFp.requestsRequestIDCommentsCommentIDDelete(requestID, commentID, options).then((request) => request(axios, basePath));
        },
        /**
         * コメントを変更する。
         * @param {string} requestID 
         * @param {number} commentID 
         * @param {InlineObject1} inlineObject1 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDCommentsCommentIDPut(requestID: string, commentID: number, inlineObject1: InlineObject1, options?: any): AxiosPromise<Comment> {
            return localVarFp.requestsRequestIDCommentsCommentIDPut(requestID, commentID, inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した依頼にコメントを新規作成する。
         * @param {string} requestID 
         * @param {InlineObject} inlineObject 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDCommentsPost(requestID: string, inlineObject: InlineObject, options?: any): AxiosPromise<Comment> {
            return localVarFp.requestsRequestIDCommentsPost(requestID, inlineObject, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した依頼の詳細を取得する。
         * @param {string} requestID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDGet(requestID: string, options?: any): AxiosPromise<RequestDetail> {
            return localVarFp.requestsRequestIDGet(requestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した依頼を修正する。作成者権限が必要。
         * @param {string} requestID 
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDPut(requestID: string, postRequest: PostRequest, options?: any): AxiosPromise<RequestDetail> {
            return localVarFp.requestsRequestIDPut(requestID, postRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。reasonは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
         * @param {string} requestID 
         * @param {InlineObject2} inlineObject2 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        requestsRequestIDStatusPut(requestID: string, inlineObject2: InlineObject2, options?: any): AxiosPromise<Status> {
            return localVarFp.requestsRequestIDStatusPut(requestID, inlineObject2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequestsApi - object-oriented interface
 * @export
 * @class RequestsApi
 * @extends {BaseAPI}
 */
export class RequestsApi extends BaseAPI {
    /**
     * 依頼一覧を取得する。
     * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
     * @param {string} [target] 誰との取引か
     * @param {number} [year] 何年度の依頼か
     * @param {string} [since] いつからの依頼か
     * @param {string} [until] いつまでの依頼か
     * @param {string} [tag] タグ(複数の場合カンマ区切り)
     * @param {string} [group] グループ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsGet(sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsGet(sort, target, year, since, until, tag, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 依頼を新規作成する。
     * @param {PostRequest} postRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsPost(postRequest: PostRequest, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsPost(postRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したコメントを削除する。
     * @param {string} requestID 
     * @param {number} commentID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDCommentsCommentIDDelete(requestID: string, commentID: number, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDCommentsCommentIDDelete(requestID, commentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コメントを変更する。
     * @param {string} requestID 
     * @param {number} commentID 
     * @param {InlineObject1} inlineObject1 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDCommentsCommentIDPut(requestID: string, commentID: number, inlineObject1: InlineObject1, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDCommentsCommentIDPut(requestID, commentID, inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼にコメントを新規作成する。
     * @param {string} requestID 
     * @param {InlineObject} inlineObject 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDCommentsPost(requestID: string, inlineObject: InlineObject, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDCommentsPost(requestID, inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼の詳細を取得する。
     * @param {string} requestID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDGet(requestID: string, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDGet(requestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼を修正する。作成者権限が必要。
     * @param {string} requestID 
     * @param {PostRequest} postRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDPut(requestID: string, postRequest: PostRequest, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDPut(requestID, postRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。reasonは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
     * @param {string} requestID 
     * @param {InlineObject2} inlineObject2 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDStatusPut(requestID: string, inlineObject2: InlineObject2, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDStatusPut(requestID, inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タグの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグを追加する。
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost: async (postTag: PostTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTag' is not null or undefined
            assertParamExists('tagsPost', 'postTag', postTag)
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTag, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグを削除する
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDDelete: async (tagID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagID' is not null or undefined
            assertParamExists('tagsTagIDDelete', 'tagID', tagID)
            const localVarPath = `/tags/{tagID}`
                .replace(`{${"tagID"}}`, encodeURIComponent(String(tagID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグの情報を取得する。
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDGet: async (tagID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagID' is not null or undefined
            assertParamExists('tagsTagIDGet', 'tagID', tagID)
            const localVarPath = `/tags/{tagID}`
                .replace(`{${"tagID"}}`, encodeURIComponent(String(tagID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグの情報を変更する。
         * @param {string} tagID 
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDPut: async (tagID: string, postTag: PostTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagID' is not null or undefined
            assertParamExists('tagsTagIDPut', 'tagID', tagID)
            // verify required parameter 'postTag' is not null or undefined
            assertParamExists('tagsTagIDPut', 'postTag', postTag)
            const localVarPath = `/tags/{tagID}`
                .replace(`{${"tagID"}}`, encodeURIComponent(String(tagID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTag, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * タグの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグを追加する。
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsPost(postTag: PostTag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsPost(postTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグを削除する
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsTagIDDelete(tagID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsTagIDDelete(tagID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグの情報を取得する。
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsTagIDGet(tagID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsTagIDGet(tagID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグの情報を変更する。
         * @param {string} tagID 
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsTagIDPut(tagID: string, postTag: PostTag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsTagIDPut(tagID, postTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * タグの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsGet(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.tagsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * タグを追加する。
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsPost(postTag: PostTag, options?: any): AxiosPromise<Tag> {
            return localVarFp.tagsPost(postTag, options).then((request) => request(axios, basePath));
        },
        /**
         * タグを削除する
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDDelete(tagID: string, options?: any): AxiosPromise<void> {
            return localVarFp.tagsTagIDDelete(tagID, options).then((request) => request(axios, basePath));
        },
        /**
         * タグの情報を取得する。
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDGet(tagID: string, options?: any): AxiosPromise<Tag & object> {
            return localVarFp.tagsTagIDGet(tagID, options).then((request) => request(axios, basePath));
        },
        /**
         * タグの情報を変更する。
         * @param {string} tagID 
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDPut(tagID: string, postTag: PostTag, options?: any): AxiosPromise<Tag & object> {
            return localVarFp.tagsTagIDPut(tagID, postTag, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * タグの一覧を返す。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsGet(options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグを追加する。
     * @param {PostTag} postTag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsPost(postTag: PostTag, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsPost(postTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグを削除する
     * @param {string} tagID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDDelete(tagID: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDDelete(tagID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの情報を取得する。
     * @param {string} tagID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDGet(tagID: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDGet(tagID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの情報を変更する。
     * @param {string} tagID 
     * @param {PostTag} postTag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDPut(tagID: string, postTag: PostTag, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDPut(tagID, postTag, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * トランザクション一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {number} [year] 何年度の依頼か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet: async (sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString().substr(0,10) :
                    since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = (until as any instanceof Date) ?
                    (until as any).toISOString().substr(0,10) :
                    until;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トランザクションを新規作成する。管理者権限が必要。
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsPost: async (postTransaction: PostTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTransaction' is not null or undefined
            assertParamExists('transactionsPost', 'postTransaction', postTransaction)
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTransaction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したトランザクションの詳細を取得する。
         * @param {string} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIDGet: async (transactionID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('transactionsTransactionIDGet', 'transactionID', transactionID)
            const localVarPath = `/transactions/{transactionID}`
                .replace(`{${"transactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したTransactionを修正する。管理者権限が必要。
         * @param {string} transactionID 
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIDPut: async (transactionID: string, postTransaction: PostTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('transactionsTransactionIDPut', 'transactionID', transactionID)
            // verify required parameter 'postTransaction' is not null or undefined
            assertParamExists('transactionsTransactionIDPut', 'postTransaction', postTransaction)
            const localVarPath = `/transactions/{transactionID}`
                .replace(`{${"transactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTransaction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * トランザクション一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {number} [year] 何年度の依頼か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsGet(sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsGet(sort, target, year, since, until, tag, group, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トランザクションを新規作成する。管理者権限が必要。
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsPost(postTransaction: PostTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsPost(postTransaction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定したトランザクションの詳細を取得する。
         * @param {string} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsTransactionIDGet(transactionID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsTransactionIDGet(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定したTransactionを修正する。管理者権限が必要。
         * @param {string} transactionID 
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async transactionsTransactionIDPut(transactionID: string, postTransaction: PostTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.transactionsTransactionIDPut(transactionID, postTransaction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * トランザクション一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {number} [year] 何年度の依頼か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsGet(sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options?: any): AxiosPromise<Array<Transaction>> {
            return localVarFp.transactionsGet(sort, target, year, since, until, tag, group, options).then((request) => request(axios, basePath));
        },
        /**
         * トランザクションを新規作成する。管理者権限が必要。
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsPost(postTransaction: PostTransaction, options?: any): AxiosPromise<Transaction> {
            return localVarFp.transactionsPost(postTransaction, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したトランザクションの詳細を取得する。
         * @param {string} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIDGet(transactionID: string, options?: any): AxiosPromise<Transaction> {
            return localVarFp.transactionsTransactionIDGet(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したTransactionを修正する。管理者権限が必要。
         * @param {string} transactionID 
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        transactionsTransactionIDPut(transactionID: string, postTransaction: PostTransaction, options?: any): AxiosPromise<Transaction> {
            return localVarFp.transactionsTransactionIDPut(transactionID, postTransaction, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * トランザクション一覧を取得する。
     * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
     * @param {string} [target] 誰との取引か
     * @param {number} [year] 何年度の依頼か
     * @param {string} [since] いつからの依頼か
     * @param {string} [until] いつまでの依頼か
     * @param {string} [tag] タグ(複数の場合カンマ区切り)
     * @param {string} [group] グループ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsGet(sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsGet(sort, target, year, since, until, tag, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トランザクションを新規作成する。管理者権限が必要。
     * @param {PostTransaction} postTransaction 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsPost(postTransaction: PostTransaction, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsPost(postTransaction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したトランザクションの詳細を取得する。
     * @param {string} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsTransactionIDGet(transactionID: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsTransactionIDGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したTransactionを修正する。管理者権限が必要。
     * @param {string} transactionID 
     * @param {PostTransaction} postTransaction 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsTransactionIDPut(transactionID: string, postTransaction: PostTransaction, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsTransactionIDPut(transactionID, postTransaction, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ユーザー一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 自分の情報を取得する。存在しない場合はユーザーを作成する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーの情報を変更する。主に権限の変更用。管理者権限またはグループオーナー権限が必要。
         * @param {PostUser} postUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut: async (postUser: PostUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postUser' is not null or undefined
            assertParamExists('usersPut', 'postUser', postUser)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * ユーザー一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 自分の情報を取得する。存在しない場合はユーザーを作成する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーの情報を変更する。主に権限の変更用。管理者権限またはグループオーナー権限が必要。
         * @param {PostUser} postUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersPut(postUser: PostUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersPut(postUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * ユーザー一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersGet(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.usersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 自分の情報を取得する。存在しない場合はユーザーを作成する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeGet(options?: any): AxiosPromise<User> {
            return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーの情報を変更する。主に権限の変更用。管理者権限またはグループオーナー権限が必要。
         * @param {PostUser} postUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersPut(postUser: PostUser, options?: any): AxiosPromise<User> {
            return localVarFp.usersPut(postUser, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * ユーザー一覧を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 自分の情報を取得する。存在しない場合はユーザーを作成する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMeGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーの情報を変更する。主に権限の変更用。管理者権限またはグループオーナー権限が必要。
     * @param {PostUser} postUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPut(postUser: PostUser, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersPut(postUser, options).then((request) => request(this.axios, this.basePath));
    }
}

export class Apis extends BaseAPI {
    /**
     * adminユーザーの一覧を返す。管理者権限が必要。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminsGet(options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).adminsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adminユーザーを追加する。管理者権限が必要。
     * @param {InlineObject3} inlineObject3
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminsPost(inlineObject3: InlineObject3, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).adminsPost(inlineObject3, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adminユーザーを削除する。管理者権限が必要。
     * @param {string} userID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public adminsUserIDDelete(userID: string, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).adminsUserIDDelete(userID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * PKCEを取得する｡
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authGenpkceGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authGenpkceGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
     * @param {string} fileID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileIDDelete(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileIDDelete(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたファイルを返す
     * @param {string} fileID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesFileIDGet(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesFileIDGet(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ファイルをアップロードする。
     * @param {any} [file]
     * @param {string} [name]
     * @param {string} [requestId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesPost(file?: any, name?: string, requestId?: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).filesPost(file, name, requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの一覧を返す。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGet(options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループを削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDDelete(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDDelete(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {InlineObject5} inlineObject5
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDMembersDelete(groupID: string, inlineObject5: InlineObject5, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDMembersDelete(groupID, inlineObject5, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したグループに所属しているユーザーを返す。
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDMembersGet(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDMembersGet(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {InlineObject4} inlineObject4
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDMembersPost(groupID: string, inlineObject4: InlineObject4, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDMembersPost(groupID, inlineObject4, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループオーナーをグループから削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {InlineObject7} inlineObject7
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDOwnersDelete(groupID: string, inlineObject7: InlineObject7, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDOwnersDelete(groupID, inlineObject7, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したグループに所属しているグループオーナーを返す。
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDOwnersGet(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDOwnersGet(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {InlineObject6} inlineObject6
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDOwnersPost(groupID: string, inlineObject6: InlineObject6, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDOwnersPost(groupID, inlineObject6, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {PostGroup} postGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsGroupIDPut(groupID: string, postGroup: PostGroup, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsGroupIDPut(groupID, postGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループを追加する。管理者権限が必要。
     * @param {PostGroup} postGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public groupsPost(postGroup: PostGroup, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).groupsPost(postGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 依頼一覧を取得する。
     * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
     * @param {string} [target] 誰との取引か
     * @param {number} [year] 何年度の依頼か
     * @param {string} [since] いつからの依頼か
     * @param {string} [until] いつまでの依頼か
     * @param {string} [tag] タグ(複数の場合カンマ区切り)
     * @param {string} [group] グループ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsGet(sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsGet(sort, target, year, since, until, tag, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 依頼を新規作成する。
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsPost(postRequest: PostRequest, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsPost(postRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したコメントを削除する。
     * @param {string} requestID
     * @param {number} commentID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDCommentsCommentIDDelete(requestID: string, commentID: number, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDCommentsCommentIDDelete(requestID, commentID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * コメントを変更する。
     * @param {string} requestID
     * @param {number} commentID
     * @param {InlineObject1} inlineObject1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDCommentsCommentIDPut(requestID: string, commentID: number, inlineObject1: InlineObject1, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDCommentsCommentIDPut(requestID, commentID, inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼にコメントを新規作成する。
     * @param {string} requestID
     * @param {InlineObject} inlineObject
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDCommentsPost(requestID: string, inlineObject: InlineObject, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDCommentsPost(requestID, inlineObject, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼の詳細を取得する。
     * @param {string} requestID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDGet(requestID: string, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDGet(requestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼を修正する。作成者権限が必要。
     * @param {string} requestID
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDPut(requestID: string, postRequest: PostRequest, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDPut(requestID, postRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。reasonは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
     * @param {string} requestID
     * @param {InlineObject2} inlineObject2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public requestsRequestIDStatusPut(requestID: string, inlineObject2: InlineObject2, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).requestsRequestIDStatusPut(requestID, inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの一覧を返す。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsGet(options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグを追加する。
     * @param {PostTag} postTag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsPost(postTag: PostTag, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsPost(postTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグを削除する
     * @param {string} tagID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDDelete(tagID: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDDelete(tagID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの情報を取得する。
     * @param {string} tagID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDGet(tagID: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDGet(tagID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの情報を変更する。
     * @param {string} tagID
     * @param {PostTag} postTag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDPut(tagID: string, postTag: PostTag, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDPut(tagID, postTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トランザクション一覧を取得する。
     * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
     * @param {string} [target] 誰との取引か
     * @param {number} [year] 何年度の依頼か
     * @param {string} [since] いつからの依頼か
     * @param {string} [until] いつまでの依頼か
     * @param {string} [tag] タグ(複数の場合カンマ区切り)
     * @param {string} [group] グループ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsGet(sort?: string, target?: string, year?: number, since?: string, until?: string, tag?: string, group?: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsGet(sort, target, year, since, until, tag, group, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トランザクションを新規作成する。管理者権限が必要。
     * @param {PostTransaction} postTransaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsPost(postTransaction: PostTransaction, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsPost(postTransaction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したトランザクションの詳細を取得する。
     * @param {string} transactionID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsTransactionIDGet(transactionID: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsTransactionIDGet(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したTransactionを修正する。管理者権限が必要。
     * @param {string} transactionID
     * @param {PostTransaction} postTransaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public transactionsTransactionIDPut(transactionID: string, postTransaction: PostTransaction, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).transactionsTransactionIDPut(transactionID, postTransaction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザー一覧を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 自分の情報を取得する。存在しない場合はユーザーを作成する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMeGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーの情報を変更する。主に権限の変更用。管理者権限またはグループオーナー権限が必要。
     * @param {PostUser} postUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersPut(postUser: PostUser, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersPut(postUser, options).then((request) => request(this.axios, this.basePath));
    }
}
